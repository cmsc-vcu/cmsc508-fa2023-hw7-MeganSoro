---
title: Homework 7 - Creating a resume database
author: Megan Sorochin
date: last-modified
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

This document contains the environmental set up for connecting to the database. The database was created in the sql file and is connected to an individual phpMyAdmin to display the database. The first part loads in the credentials from the .env file in the home directory. Next there is an overview of the project, a crows foot diagram, the tables, and sample queries. Below is the github which stores all the code. 

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-MeganSoro>

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

The goal of this project is to create a database in sql and create the desired relationships within the tables. Additionally, it was a goal to populate each of the tables with their desired attributes.This project is a database for people, skills and roles. Within this database there are tables that relate each of these entities together using primary and foreign keys. 

## Crows-foot diagram

Below is the crows foot diagram for the database created. As seen below, People (one to many) have relationship with peopleskills (zero or many). Peopleskills (zero to many) have a relationship with skills (one to many). Additionally, People (one to many) has a relationship with peopleroles (one to many). Peopleroles (one to many) has a relationship with roles (one to many).

```{mermaid}
%%| echo: false
erDiagram
    PEOPLE }|--o{ PEOPLESKILLS : have
    PEOPLESKILLS }o--|{ SKILLS : have
    PEOPLE }|--|{ PEOPLEROLES : have
    PEOPLEROLES }|--|{ ROLES : have

    PEOPLE{
        int people_id
        string first_name
        string last_name
        string email
        string linkin_url
        string headshot_url
        string discord_handle
        string brief_bio
        string date_joined
    }
    SKILLS {
        int skills_id
        string name 
        string description 
        string tag
        string url
        int time_commitment
    }
    ROLES{
        int role_id
        string role_name
        int sort_priority
    }
    PEOPLESKILLS{
        int id
        int skills_id
        int people_id
        string date_aquired
    }
    PEOPLEROLES{
        int people_roles_id
        int people_id
        int role_id
        string date_assigned
    }
```

## Examples of data in the database

For the people, skills, and roles tables, provide a description of each table and it's contents. Then provide a listing of the entire table.

### People table

The *people* table contains elements that describe each person in the database. It gives them an id, their full name, their email, their linkedin url, their headshot url, their discord handle, a brief bio, and their date joined 

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe the given skills. It gives each skill an id, a name, a description, a tag, a url, and a time_commitment. 

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from skills;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


### Roles table

The *roles* table contains elements that describe the given role. It gives each role an id, a name, and a sort priority.  

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from roles;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

## Sample queries

Let's explore the database!

### List skill names, tags, and descriptions ordered by name

```{python}
#| echo: false
#| eval: true

sql = f"""
SELECT
    name,
    description,
    tag 
from 
    skills
order BY
    name
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name

```{python}
#| echo: false
#| eval: true

sql = f"""
SELECT
    last_name,
    email
from 
    people
order BY
    last_name
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List skill names of Person 1

```{python}
#| echo: false
#| eval: true

sql = f"""
SELECT
    last_name,
    name
from 
    peopleskills a
    inner join people b on (a.people_id = b.people_id)
    inner join skills c on (a.skills_id = c.skills_id)
WHERE
    last_name = "Person 1";
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people names with Skill 6

```{python}
#| echo: false
#| eval: true

sql = f"""
SELECT
    last_name,
    tag
from 
    peopleskills a
    inner join people b on (a.people_id = b.people_id)
    inner join skills c on (a.skills_id = c.skills_id)
WHERE
    tag = "Skill 6";
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people with a DEVELOPER role

```{python}
#| echo: false
#| eval: true

sql = f"""
SELECT
    last_name,
    role_name
from 
    peopleroles a
    inner join people b on (a.people_id = b.people_id)
    inner join roles c on (a.role_id = c.role_id)
WHERE
    role_name = "DEVELOPER";
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List names and email addresses of people without skills

```{python}
#| echo: false
#| eval: true

sql = f"""
SELECT
    last_name,
    email
from 
    people a
    left join peopleskills b on (a.people_id = b.people_id)
WHERE
    b.people_id is NULL;
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List names and tags of unused skills

```{python}
#| echo: false
#| eval: true

sql = f"""
SELECT
    name,
    tag
from 
    skills a
    left join peopleskills b on (a.skills_id = b.skills_id)
WHERE
    b.skills_id is NULL;
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people names and skill names with the BOSS role

```{python}
#| echo: false
#| eval: true

sql = f"""
SELECT
    last_name,
    role_name
from 
    peopleroles a
    inner join people b on (a.people_id = b.people_id)
    inner join roles c on (a.role_id = c.role_id)
WHERE
    role_name = "Boss";
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List ids and names of unused roles

```{python}
#| echo: false
#| eval: true

sql = f"""
SELECT
    role_id,
    role_name
from 
    roles
WHERE
    1=0;
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

## Reflection

This assignment helped solidify using the extensions like poetry, so the set up was very quick and simple. The "hw7-ddl.sql" was relatively easy to fill out, especially given the lectures that helped go through it. This assignment really helped me understand how to actually create tables and attributes and also populate them. The "hw7.qmd" file was a little more difficult. The crows foot diagram seemed pretty easy, but once doing it proved to be a little more confusing than anticipated. Additionally, in this file, getting the specific queries to show up with sql, was rather confusing. This class is my first time using it so it's not my strong suit. 

